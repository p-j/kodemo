// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PropertyType {
  APPARTMENT
  HOUSE
}

enum RentType {
  SHARED
  FULL
}

enum State {
  AVAILABLE
  UNAVAILABLE
}

model Property {
  id           String       @id @default(cuid())
  amenities    Amenity[]
  createdAt    DateTime     @default(now())
  description  String       @db.Text
  roomCount    Int
  bedroomCount Int
  floor        Int?
  floorCount   Int?
  surface      Float
  totalSurface Float?
  hasElevator  Boolean?
  listings     Listing[]
  pictures     Picture[]
  reference    String       @unique
  rentType     RentType
  title        String
  type         PropertyType
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model Listing {
  id         String    @id @default(cuid())
  propertyId String
  state      State     @default(AVAILABLE)
  from       DateTime?
  duration   String?
  price      Float
  utilities  Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, from, duration])
}

model Amenity {
  id         String     @id @default(cuid())
  name       String     @unique
  properties Property[]
}

model Picture {
  id         String   @id @default(cuid())
  src        String   @db.Text
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  order      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([propertyId, src])
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  properties    Property[]
  pictures      Picture[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
